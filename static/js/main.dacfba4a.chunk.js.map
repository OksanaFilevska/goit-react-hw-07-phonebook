{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/contacts/contactsSlice.js","redux/store.js","components/Container/Container.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","_","payload","state","filter","id","loading","error","combineReducers","contactApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","createContact","contactContent","body","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","store","configureStore","reducer","contacts","contactsReducer","middleware","getDefaultMiddleware","devTools","process","setupListeners","dispatch","Container","children","className","s","container","ContactForm","useState","name","setName","number","setNumber","handleChange","event","target","value","nameInputId","shortid","generate","numberInputId","handleSubmit","e","a","preventDefault","phone","reset","form","onSubmit","htmlFor","span","input","type","onChange","pattern","title","required","btn","ContactList","data","map","item","btnList","onClick","axios","defaults","baseURL","getFilter","sortAllContacts","createSelector","slice","sort","b","filterInputId","normalizedFilter","toLowerCase","trim","contact","includes","Filter","useSelector","useDispatch","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dacfba4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2dJxU\",\"input\":\"ContactForm_input__2-jce\",\"span\":\"ContactForm_span__1E8k0\",\"btn\":\"ContactForm_btn__3cYag\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2zi3b\",\"item\":\"ContactList_item__2thDs\",\"contacts\":\"ContactList_contacts__2f07k\",\"btnList\":\"ContactList_btnList__14XLC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1KHg_\",\"span\":\"Filter_span__2LTNZ\",\"input\":\"Filter_input__ftNn_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__uhWGl\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const contactApi = createApi({\r\n  reducerPath: 'contactsApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://618c1c0fded7fb0017bb940b.mockapi.io/api/v1/',\r\n  }),\r\n  tagTypes: ['Contact'],\r\n  endpoints: builder => ({\r\n    fetchContacts: builder.query({\r\n      query: () => '/contacts',\r\n      providesTags: ['Contact'],\r\n    }),\r\n    deleteContact: builder.mutation({\r\n      query: contactId => ({\r\n        url: `/contacts/${contactId}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n    createContact: builder.mutation({\r\n      query: contactContent => ({\r\n        url: '/contacts',\r\n        method: 'POST',\r\n        body: contactContent,\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useFetchContactsQuery, useDeleteContactMutation, useCreateContactMutation } =\r\n  contactApi;","import { configureStore } from '@reduxjs/toolkit';\r\nimport { setupListeners } from '@reduxjs/toolkit/query';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport { contactApi } from './contacts/contactsSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n\r\n    [contactApi.reducerPath]: contactApi.reducer,\r\n  },\r\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware(), contactApi.middleware],\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// export default store;\r\n\r\nsetupListeners(store.dispatch);","import s from './Container.module.css';\r\n\r\nfunction Container({ children }) {\r\n  return <div className={s.container}>{children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport s from './ContactForm.module.css';\r\n// import { connect } from 'react-redux';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { useDispatch } from 'react-redux';\r\n\r\n// import contactsOperations from 'redux/contacts/contacts-operations';\r\nimport { useCreateContactMutation } from 'redux/contacts/contactsSlice';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  // const dispatch = useDispatch();\r\n  // const addContact = (name, number) => dispatch(contactsOperations.addContact(name, number));\r\n\r\n  const [createContact] = useCreateContactMutation();\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  // const handleSubmit = e => {\r\n  //   e.preventDefault();\r\n\r\n  //   const contact = {\r\n  //     id: shortid.generate(),\r\n  //     name: name,\r\n  //     number: number,\r\n  //   };\r\n\r\n  //   addContact(contact);\r\n\r\n  //   reset();\r\n  // };\r\n\r\n  // const reset = () => {\r\n  //   setName('');\r\n  //   setNumber('');\r\n  // };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    const contact = {\r\n      // id: shortid.generate(),\r\n      name: name,\r\n      phone: number,\r\n    };\r\n    // createContact(e.currentTarget.elements.content.value);\r\n    createContact(contact);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label htmlFor={nameInputId}>\r\n        <span className={s.span}>Name</span>\r\n\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          id={nameInputId}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label htmlFor={numberInputId}>\r\n        <span className={s.span}>Number</span>\r\n\r\n        <input\r\n          className={s.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          id={numberInputId}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <br />\r\n\r\n      <button className={s.btn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\nexport default ContactForm;","import React from 'react';\r\n// import { connect } from 'react-redux';\r\n// import { useSelector } from 'react-redux';\r\n// import { useDispatch } from 'react-redux';\r\nimport s from './ContactList.module.css';\r\n// import contactsActions from 'redux/contacts/contacts-actions';\r\n// import contactsOperations from 'redux/contacts/contacts-operations';\r\n// import { getVisibleContacts } from 'redux/contacts/contacts-selectors';\r\nimport { useDeleteContactMutation, useFetchContactsQuery } from 'redux/contacts/contactsSlice';\r\n\r\nconst ContactList = () => {\r\n  // const contacts = useSelector(state => getVisibleContacts(state));\r\n  // const dispatch = useDispatch();\r\n  // const getVisibleContact = useSelector(getVisibleContacts);\r\n\r\n  // const { data: contacts } = useFetchContactsQuery(null, { getVisibleContacts });\r\n  const { data: contacts } = useFetchContactsQuery();\r\n\r\n  const [deleteContact] = useDeleteContactMutation();\r\n\r\n  return (\r\n    <ul className=\"s.list\">\r\n      {contacts &&\r\n        contacts.map(({ id, name, phone }) => (\r\n          <li key={id} className={s.item}>\r\n            <p className=\"s.contacts\">\r\n              {name}: <span>{phone}</span>\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              className={s.btnList}\r\n              // onClick={() => dispatch(contactsOperations.deleteContact(id))}\r\n              onClick={() => deleteContact(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  dispatch => {\r\n    const contact = {\r\n      name,\r\n      number,\r\n      completed: false,\r\n    };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch(error => dispatch(addContactError(error)));\r\n  };\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst sortAllContacts = createSelector([getAllContacts], contacts => {\r\n  return contacts.slice().sort((a, b) => b.id - a.id);\r\n});\r\nconst getVisibleContacts = createSelector([sortAllContacts, getFilter], (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase().trim();\r\n  return contacts.filter(\r\n    contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter) || contact.number.includes(filter),\r\n  );\r\n});\r\n\r\nexport { getFilter, getVisibleContacts, getAllContacts, sortAllContacts };","import React from 'react';\r\nimport s from './Filter.module.css';\r\nimport shortid from 'shortid';\r\n// import { connect } from 'react-redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import { contactsActions } from '../../redux/contacts/contacts-actions';\r\n// import contactsOperations from 'redux/contacts/contacts-operations';\r\nimport { changeFilter, getFilter } from 'redux/contacts';\r\n// import { getVisibleContacts } from 'redux/contacts/contacts-selectors';\r\n\r\nconst filterInputId = shortid.generate();\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilter);\r\n\r\n  const dispatch = useDispatch();\r\n  const OnChangeFilter = e => dispatch(changeFilter(e.target.value));\r\n\r\n  return (\r\n    <label htmlFor={filterInputId}>\r\n      <span className={s.span}>Find contacts by name and number</span>\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={OnChangeFilter}\r\n        id={filterInputId}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;","// import { useEffect } from 'react';\n// import { connect } from 'react-redux';\n// import { useDispatch } from 'react-redux';\nimport './App.css';\nimport Container from './components/Container/Container';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n// import contactsOperations from 'redux/contacts/contacts-operations';\n// import { useFetchContactsQuery } from 'redux/contacts/contactsSlice';\n\nfunction App() {\n  // const dispatch = useDispatch();\n  // useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  // const { data: contacts } = useFetchContactsQuery();\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {/* {contacts && <ContactList contacts={contacts} />} */}\n      <ContactList />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from 'redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n\n"],"sourceRoot":""}